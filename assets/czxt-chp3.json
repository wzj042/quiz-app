{
  "questions": [
    {
      "uniqueId": "SCH01",
      "content": "$\\LaTeX$ \n\n\n\n $a_b^c$ [   ]有利于CPU繁忙型的作业，而不利于I/O繁忙型的作业。![图片](https://p.ananas.chaoxing.com/star3/origin/50d9eb4a30a8881089c51bc2f1e97c6f.png)",
      "type": "single-choice",
      "options": [
        "时间片轮转调度算法",
        "先来先服务调度算法",
        "短作业(进程)优先算法",
        "优先权调度算法"
      ],
      "correct_answer": [
        "先来先服务调度算法"
      ],
      "analysis": "先来先服务(FCFS)调度算法是一种最简单的调度算法，在作业调度中采用该算法时，每次调度从后备作业队列中选择一个或多个最先进入该队列的作业，将它们调入内存，为它们分配资源、创建进程，然后放入就绪队列。FCFS调度算法比较有利于长作业，而不利于短作业。所谓CPU繁忙型的作业，是指该类作业需要大量的CPU时间进行计算，而很少请求I/O操作。/O繁忙型的作业是指CPU处理时，需频繁地请求I/O操作。所以CPU繁忙型作业更接近于长作业。答案选择B选项。"
    },
    {
      "uniqueId": "SCH02",
      "content": "下面有关选择进程调度算法的准则中，不正确的是()。",
      "type": "single-choice",
      "options": [
        "尽快响应交互式用户的请求",
        "尽量提高处理器利用率",
        "尽可能提高系统吞吐量",
        "适当增长进程就绪队列的等待时间"
      ],
      "correct_answer": [
        "适当增长进程就绪队列的等待时间"
      ],
      "analysis": "在选择进程调度算法时应考虑以下几个准则:①公平:确保每个进程获得合理的CPU份额;②有效:使CPU尽可能地忙碌;③响应时间:使交互用户的响应时间尽可能短;④周转时间:使批处理用户等待输出的时间尽可能短;⑤吞吐量:使单位时间处理的进程数尽可能最多。由此可见D选项不正确。"
    },
      {
        "uniqueId": "SCH03",
      "content": "设有4个作业同时到达，每个作业的执行时间均为2h，它们在一台处理器上按单道式运行，则平均周转时间为()。",
        "type": "single-choice",
        "options": [
          "1h",
          "5h",
          "2.5h",
          "8h"
        ],
        "correct_answer": [
          "5h"
        ],
      "analysis": "4个作业的周转时间分别是2h，4h，6h，8h，所以4个作业的总周转时间为2+4+6+8=20h。\n此时，平均周转时间=各个作业周转时间之和/作业数=20/4=5小时。"
    },
    {
      "uniqueId": "SCH04",
      "content": "()优先级是在创建进程时确定的，确定之后在整个运行期间不再改变。",
      "type": "single-choice",
      "options": [
        "先来先服务",
        "动态",
        "短作业",
        "静态"
      ],
      "correct_answer": [
        "静态"
      ],
      "analysis": "优先级调度算法分静态和动态两种。静态优先级在进程创建时确定，之后不再改变。"
    },
      {
        "uniqueId": "SCH05",
      "content": "现在有三个同时到达的作业J1，J2和J3，它们的执行时间分别是T1，T2，T3，且T1<T2<T3。\n系统按单道方式运行且采用短作业优先调度算法，则平均周转时间是()。",
        "type": "single-choice",
        "options": [
          "T+T2+T3",
          "(3T+2T2+T3)/3",
          "(T1+T2+T3)/3",
          "(T1+2T2+3T3)/3"
        ],
      "correct_answer": [
       "(3T+2T2+T3)/3"
      ],
      "analysis": "系统采用短作业优先调度算法，作业的执行顺序为J1，J2，J3，J1的周转时间为T1，J2的周转时间为T1+T2，J3的周转时间为T1+T2+T3，则平均周转时间为(T1+T1+T2+T1+T2+T3)/3=(3T1+2T2+T3)/3。"
    },
      {
        "uniqueId": "SCH06",
      "content": "采用时间片轮转调度算法分配CPU时，当处于运行态的进程用完一个时间片后，它的状态是()状态。",
        "type": "single-choice",
        "options": [
          "阻塞",
          "运行",
          "就绪",
          "消亡"
        ],
         "correct_answer": [
           "就绪"
         ],
         "analysis": "处于运行态的进程用完一个时间片后，其状态会变为就绪态，等待下一次处理器调度。进程执行完最后的语句并使用系统调用exit请求操作系统删除它或出现一些异常情况时，进程才会终止。"
    },
     {
        "uniqueId": "SCH07",
        "content": "一个作业8:00到达系统，估计运行时间为1h。若10:00开始执行该作业，其响应比是()。",
         "type": "single-choice",
        "options": [
          "2",
          "1",
         "3",
           "0.5"
        ],
      "correct_answer": [
       "3"
      ],
         "analysis": "响应比=(等待时间+执行时间)/执行时间。\n等待时间 = 10:00 - 8:00 = 2h;\n执行时间 = 1h;\n响应比=(2+1)/1 = 3;"
     },
    {
      "uniqueId": "SCH08",
      "content": "下列调度算法中，()调度算法是绝对可抢占的。",
      "type": "single-choice",
      "options": [
        "先来先服务",
        "时间片轮转",
        "优先级",
        "短进程优先"
      ],
      "correct_answer": [
        "时间片轮转"
      ],
      "analysis": "时间片轮转算法是按固定的时间配额来运行的，时间一到，不管是否完成，当前的进程必须撤下，调度新的进程，因此它是由时间配额决定的、是绝对可抢占的。而优先级算法和短进程优先算法都可分为抢占式和不可抢占式。"
    },
    {
      "uniqueId": "SCH09",
      "content": "下列进程调度算法中，综合考虑进程等待时间和执行时间的是()。",
      "type": "single-choice",
      "options": [
        "时间片轮转调度算法",
        "短进程优先调度算法",
        "先来先服务调度算法",
        "高响应比优先调度算法"
      ],
      "correct_answer": [
        "高响应比优先调度算法"
      ],
      "analysis": "响应比R=(等待时间+执行时间)/执行时间。它综合考虑了每个进程的等待时间和执行时间，对于同时到达的长进程和短进程，短进程会优先执行，以提高系统吞吐量;而长进程的响应比可以随等待时间的增加而提高，不会产生进程无法调度的情况。"
    },
    {
      "uniqueId": "SCH10",
      "content": "进程调度算法采用固定时间片轮转调度算法，当时间片过大时，就会使时间片轮转法算法转化为()调度算法。",
        "type": "single-choice",
        "options": [
          "高响应比优先",
          "先来先服务",
          "短进程优先",
          "以上选项都不对"
        ],
      "correct_answer": [
       "先来先服务"
      ],
      "analysis": "时间片轮转调度算法在实际运行中也按先后顺序使用时间片，时间片过大时，我们可以认为其大于进程需要的运行时间，即转变为先来先服务调度算法。"
    },
      {
        "uniqueId": "SCH11",
      "content": "下列有关基于时间片的进程调度的叙述中，错误的是()。",
         "type": "single-choice",
        "options": [
          "时间片越短，进程切换的次数越多，系统开销越大",
          "当前进程的时间片用完后，该进程状态由执行态变为阻塞态",
          "时钟中断发生后，系统会修改当前进程在时间片内的剩余时间",
          "影响时间片大小的主要因素包括响应时间、系统开销和进程数量等"
        ],
        "correct_answer": [
        "当前进程的时间片用完后，该进程状态由执行态变为阻塞态"
         ],
       "analysis": "进程切换带来系统开销，切换次数越多，开销越大，选项A正确。当前进程的时间片用完后，其状态由执行态变为就绪态，选项B错误。时钟中断是系统中特定的周期性时钟节拍，操作系统通过它来确定时间间隔，实现时间的延时和任务的超时，选项C正确。现代操作系统为了保证性能最优，通常根据响应时间、系统开销、进程数量、进程运行时间、进程切换开销等因素确定时间片大小，选项D正确。"
      },
    {
      "uniqueId": "SCH12",
      "content": "分时操作系统通常采用()调度算法来为用户服务。",
       "type": "single-choice",
      "options": [
        "时间片轮转",
       "先来先服务",
        "短作业优先",
        "优先级"
      ],
      "correct_answer": [
        "时间片轮转"
      ],
      "analysis": "分时系统需要同时满足多个用户的需要，因此把处理器时间轮流分配给多个用户作业使用，即采用时间片轮转调度算法。"
    },
     {
      "uniqueId": "SCH13",
      "content": "在进程调度算法中，对短进程不利的是()。",
         "type": "single-choice",
        "options": [
          "短进程优先调度算法",
         "先来先服务调度算法",
           "高响应比优先调度算法",
          "多级反馈队列调度算法"
        ],
      "correct_answer": [
        "先来先服务调度算法"
      ],
      "analysis": "先来先服务调度算法中，若一个长进程(作业)先到达系统，则会使后面的许多短进程(作业)等待很长的时间，因此对短进程(作业)不利。"
    },
    {
      "uniqueId": "SCH14",
      "content": "假设系统中所有进程同时到达，则使进程平均周转时间最短的是()调度算法。",
       "type": "single-choice",
      "options": [
        "先来先服务",
        "短进程优先",
        "时间片轮转",
       "优先级"
      ],
      "correct_answer": [
        "短进程优先"
      ],
      "analysis": "短进程优先调度算法具有最短的平均周转时间。平均周转时间=各进程周转时间之和/进程数。因为每个进程的执行时间都是固定的，所以变化的是等待时间，只有短进程优先算法能最小化等待时间。"
    },
       {
        "uniqueId": "SCH15",
      "content": "下列选项中，满足短作业优先且不会发生饥饿现象的是()调度算法。",
         "type": "single-choice",
        "options": [
          "先来先服务",
          "高响应比优先",
          "时间片轮转",
          "短作业优先"
        ],
      "correct_answer": [
       "高响应比优先"
      ],
         "analysis": "响应比=(等待时间+运行时间)/运行时间。高响应比优先算法在等待时间相同的情况下，作业执行时间越短，响应比越高，满足短任务优先。随着长作业等待时间的增加，响应比会变大，执行机会也会增大，因此不会发生饥饿现象。先来先服务和时间片轮转不符合短任务优先，非抢占式短任务优先会产生饥饿现象"
      }
  ],
  "sets": [
    {
      "id": "czxtchp3",
      "name": "操作系统进程-第三章-调度选择题",
      "description": "操作系统进程调度选择题",
      "questionIds": [
         "SCH01",
         "SCH02",
         "SCH03",
         "SCH04",
         "SCH05",
          "SCH06",
         "SCH07",
         "SCH08",
         "SCH09",
        "SCH10",
         "SCH11",
        "SCH12",
        "SCH13",
        "SCH14",
        "SCH15"

      ]
    }
  ]
}